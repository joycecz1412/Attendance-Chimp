Reflections on the HW6 Puzzle Exercise:

First, I  must note that I used Chatgpt to help create initial functions for computing the hash and loading files into puzzle.py. I basically took the first three functions as given and didn't change anything. 

Then, I was informed in OH that the best way to go about hacking the hashes was to first identify the 9 digit number added to every string. In order to do that, I created a list of 5-6 most common words used (based off my understanding of the English language) and paired that with all the possible digits (in the form of string) from 1 to 10 billion. Initially, when solving puzzle easy I didn't notice that my function was less efficient that it could be. My outer for loop was for number in numbers, and my inner for loop was for word in words, which means I was testing all the words for each number. This does not take long for Puzzle easy because there are only four digits, but I realized that I was not getting anywhere in the actual puzzle. Prof Trimble gave the hint that we should probably try all the numbers with the most common word first, so I switched the order of the for loops and was able to test all the numbers for each word instead of the other way around. 

Just to make sure my function was running properly I also added a line to print 'at 50 mill' when I reached that point. In order to speed up this first part of the process as well, I break the inner for loop the moment I find one match so I do not need to continue with the process after I have found the 9 digit number. The outer for loop does not break, but it doesn't matter because I can see when the number prints and manually stop the function from running after I have obtained that information. It took me less than five minutes to do this for the actual puzzle. This is because my first tested word 'and' appears in the quote. 

After finding the number 294644421, I moved on to importing a word file that would allow me to find enough words in the quote to paste it into a search engine and find the exact quote. My initial word file was too small (150K) so I switched to a larger (400K) one. I also added a list of most common sentence starters so that I might be able to catch the beginning of the sentence which would have a capital letter. This step was not super necessary because I was able to use a snippet in the middle of the sentence to find the whole quote. 

It was also really important to keep track of the indexes of words in the quote so that they would be placed in the correct order to search easily. I modified the function by adding an indexed_hash object to find the proper order. I realize later that if a word appears more than once it updates the index so the tuple will only print the final index and the word, but that did not impede me greatly from solving the puzzle so I did not care to change that.  

Thankfully, I was able to find the continuous phrase "sloped down to an old fence" after running the function once, which was enough for me to paste into google and find the correct quote from the novel Watership Down Man. Then I found all the words I was missing (the ones with periods and commas attached) and added them to my Word File so that the only word that does not appear would be the misspelled one, which turned out to be 'patches'. 

Chatgpt helped me create my function for finding edit distances as well. I asked it to give me code for finding deletes, transposes, replaces and inserts. The method it used by first creating the object 'letters' and iterating through it was very smart and saved me a lot of time. Then I wrote a second function generate_2edits to find all possible misspellings of the word 'patches' with edit distance 2. I ran my function again with the list of words from the quotation and my list of all misspellings to finally find all the words in the quote. It was not actually necessary to add all the words from the quote since I just need to find the misspelling now, but it does not really matter. The final misspelling of the word is: pacthes. 

Thus, the decoded message is: The primroses were over. Toward the edge of the wood, where the ground became open and sloped down to an old fence and a brambly ditch beyond, only a few fading pacthes of pale yellow still showed among the dog's mercury and oak-tree roots. On the other side of the fence, the upper part of the field was full of rabbit holes.
